import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

# Exerc√≠cio 2 - Acelara√ß√£o Constante
# Um avi√£o arranque do repouso e acelera com acelera√ß√£o constante ùëéùë• = 3m/s2 at√© atingir a velocidade de descolagem de 250 km/h.

# 1. Escreve a fun√ß√£o que descreve o movimento do avi√£o (lei do movimento) ùë•(ùë°). Fa√ßa o gr√°fico da lei do movimento.

acelaracao = 3 # m/s^2
velocidadef = 69.44 # m/s (convertido dos 250km/h) / (250*1000/3600) = 69.44
tempof = velocidadef/acelaracao # Tempo para atingir a velocidade final - velocidadefinal/acelaracao

def funcaomovimento(t): 
    return 1.5 * t**2  # x(t) = 1.5 * t^2

t_values = np.linspace(0, tempof, 100)
x_values = funcaomovimento(t_values)
plt.figure(figsize=(8, 5))
plt.plot(t_values, x_values, label='$x(t) = 1.5 t^2$', color='b')
plt.xlabel('Tempo (s)')
plt.ylabel('Posi√ß√£o (m)')
plt.title('Lei do Movimento do Avi√£o')
plt.legend()
plt.grid()
plt.show()

# Derivada da equa√ß√£o da posi√ß√£o em fun√ß√£o do tempo √© a velocidade, e o grafico mostra a trajet√≥ria do avi√£o.

#2. Em que instante e qual a dist√¢ncia percorrida pelo avi√£o quando atinge a velocidade de descolagem?
#   Encontre a solu√ß√£o com c√°lculo anal√≠tico.

distanciaf = 0.5 * acelaracao * tempof**2 # Distancia percorrida at√© atingir a velocidade final

print(f"O avi√£o atinge a velocidade de descolagem em {tempof:.2f} segundos.")
print(f"A dist√¢ncia percorrida at√© esse instante √© {distanciaf:.2f} metros.")
# O avi√£o atinge a velocidade de descolagem em 23.15 segundos.
# A dist√¢ncia percorrida at√© esse instante √© 26.72 metros.

# Calculei o tempo necessario para atingir a velocidade de descolagem e a distancia percorrida at√© esse instante.

# 3. Use sympy.integrate() para integrar a acelera√ß√£o em fun√ß√£o de tempo duas vezes, para obter a velocidade e a
#    posi√ß√£o do avi√£o como fun√ß√µes (simb√≥licos) de tempo. Est√° de acordo com o que se esperava? 

t = sp.symbols('t')
velocidade = sp.integrate(acelaracao, t) # Integra√ß√£o da acelera√ß√£o em fun√ß√£o do tempo para obter a velocidade
posicao = sp.integrate(velocidade, t) # Integra√ß√£o da velocidade em fun√ß√£o do tempo para obter a posi√ß√£o

velocidade = velocidade.subs('C1', 0) # Constante de integra√ß√£o = 0
posicao = posicao.subs('C2', 0) # Constante de integra√ß√£o = 0
print("Express√£o simb√≥lica da velocidade v(t):") 
print(velocidade)
print("Express√£o simb√≥lica da posi√ß√£o x(t):")
print(posicao)

# Os resultados obtidos com integra√ß√£o simb√≥lica confirmam exatamente o que t√≠nhamos encontrado analiticamente na Al√≠nea 1. 
# Isto demonstra que a modela√ß√£o do movimento do avi√£o est√° correta!

# 4. Use sympy.nsolve() para encontrar o tempo e a posi√ß√£o de descolagem. Concorde com a solu√ß√£o encontrada em 2.?

time_symbol = sp.Symbol('t')
time_solution = sp.nsolve(velocidade - velocidadef, time_symbol, 10)  # Aproxima√ß√£o inicial = 10s
position_solution = posicao.subs(t, time_solution) # Posi√ß√£o de descolagem

print("\nSolu√ß√£o num√©rica usando sympy.nsolve:")
print(f"Tempo de descolagem: {time_solution:.2f} segundos")
print(f"Posi√ß√£o de descolagem: {position_solution:.2f} metros")

# Compara√ß√£o com os valores da al√≠nea 2
print("\nCompara√ß√£o com a solu√ß√£o anal√≠tica:")
print(f"Tempo anal√≠tico: {tempof:.2f} segundos")
print(f"Posi√ß√£o anal√≠tica: {distanciaf:.2f} metros")

# Os valores s√£o praticamente identicos, entao confirma que os calculos anteriores estao corretos,
# Ent√£o, os m√©todos num√©ricos e anal√≠ticos est√£o de acordo!





